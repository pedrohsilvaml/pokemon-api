// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/client/poke_api/poke_api.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	poke_api "github.com/pedrohsilvaml/pokemon-api/internal/client/poke_api"
)

// MockPokeAPI is a mock of PokeAPI interface.
type MockPokeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPokeAPIMockRecorder
}

// MockPokeAPIMockRecorder is the mock recorder for MockPokeAPI.
type MockPokeAPIMockRecorder struct {
	mock *MockPokeAPI
}

// NewMockPokeAPI creates a new mock instance.
func NewMockPokeAPI(ctrl *gomock.Controller) *MockPokeAPI {
	mock := &MockPokeAPI{ctrl: ctrl}
	mock.recorder = &MockPokeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokeAPI) EXPECT() *MockPokeAPIMockRecorder {
	return m.recorder
}

// GetPokemon mocks base method.
func (m *MockPokeAPI) GetPokemon(arg0 string) (*poke_api.PokeAPIData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemon", arg0)
	ret0, _ := ret[0].(*poke_api.PokeAPIData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemon indicates an expected call of GetPokemon.
func (mr *MockPokeAPIMockRecorder) GetPokemon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemon", reflect.TypeOf((*MockPokeAPI)(nil).GetPokemon), arg0)
}
